*HIGH LEVEL: WHAT AM I DOING?*
I'm an alternative implementation of Keybase's Bitcoin-anchored security model. Keybase publishes its global Merkle root into Bitcoin so any two users can be sure they're seeing all of the same user & device & team & keybase-config related changes, all of which can be found in the Keybase Merkle tree. This is neat, but they only do it a couple times a day. With OpenTimestamps, I can make the same guarantee (admittedly a little more work to verify) much more often. And if multiple people run me, there'll be an even greater guarantee that Keybase cannot fork the state of the world without someone noticing.

Instead of burning a small amount of Bitcoin to get some bytes directly on chain (which Keybase does every 12 hours), I'm using https://opentimestamps.org to create a proof (which is free to me, but you should go donate kthx), and I'm publishing Keybase's signature (over the Merkle root) along with this proof in my public channel, where I've signed it, and everyone can see it.

*DETAILS*
You can see these proofs from the CLI in my public channel:
```
> keybase chat read --public {bot.username}
```
They're JSON and hopefully self-explanatory. What's not totally obvious is that proofs happen in two stages:
(1) fetch the current merkle root and signature from the Keybase API at https://keybase.io/_/api/1.0/merkle/root.json, do a bunch of verification, then request an opentimestamp proof (`ots stamp`), and broadcast the preliminary ots proof with the raw Keybase data.
(2) Once the proof has made its way via the opentimestamps protocol all the way to
the blockchain, update the ots proof (`ots upgrade`) and then the full Keybase message JSON with the additional OTS data and change the status to `VERIFIABLE`.

If you want to check my work or use these proofs, first of all, thanks :tada:. There's a bigger writeup of how this all works in the github readme: https://github.com/xgess/keybase_merkle_prover

Suggestions welcome. Thanks for reading!
